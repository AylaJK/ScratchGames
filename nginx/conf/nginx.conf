
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   ../public/errorpages;
            internal;
        }
        
        location = / {
            root   ../public/html;
            index  index.html;
        }
        
        location / {
            add_header X-uri "$uri" always; 
            add_header X-requri "$request_uri" always;  
            proxy_set_header Host  $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            
            proxy_cache_bypass $http_upgrade;
            
            proxy_pass   http://127.0.0.1:3000;
            proxy_redirect off;
            
            proxy_connect_timeout  10;
            proxy_send_timeout     10;
            proxy_read_timeout     10;
            send_timeout           10;
            
            proxy_intercept_errors on;
            recursive_error_pages on;
            # error_page 500 502 503 504 = @nodeOutage;
            # error_page 404 = @nodeNotFound;
        }
        
        location @nodeUnauthorized {
            rewrite ^ /login?redirect=$request_uri last;
        }
        
        location @nodeOutage {
            return 503;
            error_page 503 /Node-50x.html;
        }
        location = /Node-50x.html {
            root  ../public/html-error; 
            internal;
        }
        
        location @nodeNotFound {
            return 404; 
            error_page 404 /Node-404.html;
        }
        location = /Node-404.html {
            root  ../public/html-error; 
            internal;
        }

        location ^~ /favicon {
            rewrite ^/favicon(/.*) $1 break;
            root   ../public/favicon;
        }
        
        # (\?.*)? pattern matches any get query stuck on the end, if a question mark is present
        
        location ~ \.html(\?.*)?$ {
            root   ../public/html;
        }

        location ~ \.css(\?.*)?$ {
            root   ../public/css;
        }
        
        location ~ \.js(\?.*)?$ {
            root   ../public/js;
        }
        
        location ~ \.(gif|jpg|jpeg|png|ico|svg)(\?.*)?$ {
            root   ../public/img;
        }
        
        # Catchall location for anything with a file extension (and maybe a get query)
        location ~ \.[^\s\/\?]*(\?.*)?$ {
            root   ../public/misc;
        }

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
